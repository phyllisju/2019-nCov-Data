Sigma_proposal_chol_inv <- solve(Sigma_proposal_chol)
MH_kernel <- function(state){
chain_state <- state$chain_state
current_pdf <- state$current_pdf
proposal <- fast_rmvnorm_chol(1, chain_state, Sigma_proposal_chol)
proposal_pdf <- logtarget(proposal)
if (log(runif(1)) < (proposal_pdf - current_pdf)){
return(list(chain_state = proposal, current_pdf = proposal_pdf))
} else {
return(list(chain_state = chain_state, current_pdf = current_pdf))
}
}
# MTM kernel
MTM_kernel <- function(state){
## use Barker's choince
chain_state <- state$chain_state
current_pdf <- state$current_pdf
# L <- Lmax
L <- sample.int(n = Lmax, size = 1)
proposals <- matrix(data = NA, nrow = L, ncol = target_dim)
proposalpdfs <- rep(NA, L)
for (ell in 1:L){
proposals[ell,] <- fast_rmvnorm_chol(1, chain_state, Sigma_proposal_chol)
}
proposalpdfs <- apply(proposals, 1, function(x) logtarget(x))
proposalweights <- proposalpdfs # may choose other weight functions
proposalweights_max <- max(proposalweights)
proposalweights <- proposalweights - proposalweights_max
ws <- exp(proposalweights) / (sum(exp(proposalweights))) # normalized weights
y <- proposals[sample.int(n = L, size = 1, replace = F, prob = ws),]
auxilliary_proposals <- matrix(data = NA, nrow = L, ncol = target_dim)
auxilliary_proposals[L,] <- chain_state
for (ell in 1:(L-1)){
auxilliary_proposals[ell,] <- fast_rmvnorm_chol(1, chain_state, Sigma_proposal_chol)
}
auxilliarypdfs <- apply(auxilliary_proposals, 1, logtarget)
auxilliaryweights <- auxilliarypdfs
auxilliaryweights_max <- max(auxilliaryweights)
auxilliaryweights <- auxilliaryweights - auxilliaryweights_max
logalpha <- log(sum(exp(proposalweights))) - log(sum(exp(auxilliaryweights))) + proposalweights_max - auxilliaryweights_max
if (log(runif(1)) < logalpha){
return(list(chain_state = y, current_pdf = logtarget(y)))
} else {
return(list(chain_state = chain_state, current_pdf = current_pdf))
}
}
# Lmax <- 2
Lstep_MH_kernel <- function(state){
L <- sample(1:Lmax, 1)
for (ell in 1:L) state <- MH_kernel(state)
return(state)
}
niterations <- 10000
mhchain <- rep(0, niterations)
state <- rinit()
for (i in 1:niterations){
state <- MTM_kernel(state)
mhchain[i] <- state$chain_state[1]
}
## histogram of the chain after removing 100 first iterations
hist(mhchain[1001:niterations], prob = TRUE, nclass = 140, main = "", xlab = "x")
curve(dnorm(x), add = TRUE, col = "red")
stopCluster(cl)
source('~/Dropbox/OTcouplingmultipleproposals/OTcoupledmtm.R', echo=TRUE)
lilibrary(devtools  )
library(devtools)
library(roxygen2)
document()
document()
library(roxygen2)
setwd("Dropbox/wuhan/2019-nCov-Data/")
## Only consider cases with known symptom onset, arrived on or before January 23
data <- subset(data, !is.na(Symptom))
data <- subset(data, Arrived <= 23+31)
data <- subset(data, !(is.na(Arrived) & Infected_first == 1 & Infected_last == Symptom)) # remove cases with no information
source("functions.R")
data <- read.table("Feb10InChina.tsv", sep = "\t", header = TRUE)
data$Confirmed <- date.process(data$Confirmed)
data$Arrived <- date.process(data$Arrived)
data$Symptom <- date.process(data$Symptom)
data$Initial <- date.process(data$Initial)
data$Hospital <- date.process(data$Hospital)
case72 <- data[72,]
data <- data[-72, ] # Don't know how to parse this infected date yet
data <- parse.infected(data)
case72$Infected_first <- date.process("15-Jan")
case72$Infected_last <- date.process("21-Jan")
data <- read.table("Feb10InChina.tsv", sep = "\t", header = TRUE)
data$Confirmed <- date.process(data$Confirmed)
data$Arrived <- date.process(data$Arrived)
data$Symptom <- date.process(data$Symptom)
data$Initial <- date.process(data$Initial)
data$Hospital <- date.process(data$Hospital)
# case72 <- data[72,]
# data <- data[-72, ] # Don't know how to parse this infected date yet
data <- parse.infected(data)
case72$Infected_first <- date.process("15-Jan")
case72$Infected_last <- date.process("21-Jan")
data <- rbind(data, case72)
source("functions.R")
data <- read.table("Feb10InChina.tsv", sep = "\t", header = TRUE)
data$Confirmed <- date.process(data$Confirmed)
data$Arrived <- date.process(data$Arrived)
data$Symptom <- date.process(data$Symptom)
data$Initial <- date.process(data$Initial)
data$Hospital <- date.process(data$Hospital)
case72 <- data[72,]
data <- data[-72, ] # Don't know how to parse this infected date yet
data <- parse.infected(data)
case72$Infected_first <- date.process("15-Jan")
case72$Infected_last <- date.process("21-Jan")
data <- rbind(data, case72)
## Only consider cases with known symptom onset, arrived on or before January 23
data <- subset(data, !is.na(Symptom))
data <- subset(data, Arrived <= 23+31)
data <- subset(data, !(is.na(Arrived) & Infected_first == 1 & Infected_last == Symptom)) # remove cases with no information
#' Compute the likelihood
#'
#' GT is a discretized distribution for the generation time
#'
infection.likelihood <- function(symptom, infected_first, infected_last, GT) {
loglike <- 0
for (i in 1:nrow(data)) {
min.incub <- symptom[i] - infected_last[i]
max.incub <- symptom[i] - infected_first[i]
loglike <- loglike + log(sum(GT$GT[1 +(min.incub):(max.incub)]))
}
loglike
}
myfun <- function(par) {
GT <- R0::generation.time("gamma", par,truncate = 100);
infection.likelihood(data$Symptom, data$Infected_first, data$Infected_last, GT)
}
fit <- optim(c(7.5, 3.4), myfun, control = list(fnscale = -1))
print(fit)
pars <- expand.grid(mean = seq(5, 15, 0.1), sd = seq(2, 10, 0.1))
pars$loglike <- apply(pars, 1, myfun)
print(pars[which.max(pars$loglike),]) ## print the grid-search MLE to terminal
pars$in.CR <- (pars$loglike > fit$value - qchisq(0.95, 1) / 2)
library(ggplot2)
p1 <- ggplot(pars) + aes(x = mean, y = sd, fill = loglike) + geom_tile()
p1
p2 <- ggplot(pars) + aes(x = mean, y = sd, fill = in.CR) +geom_tile()
p2
## MLE for incubation period: mean = 6.8, sd = 4.2 CI for mean
dim(data)
data$Case
source("functions.R")
data <- read.table("Feb10InChina.tsv", sep = "\t", header = TRUE)
data$Confirmed <- date.process(data$Confirmed)
data$Arrived <- date.process(data$Arrived)
data$Symptom <- date.process(data$Symptom)
data$Initial <- date.process(data$Initial)
data$Hospital <- date.process(data$Hospital)
case72 <- data[72,]
data <- data[-72, ] # Don't know how to parse this infected date yet
data <- parse.infected(data)
case72$Infected_first <- date.process("15-Jan")
case72$Infected_last <- date.process("21-Jan")
data <- rbind(data, case72)
## Only consider cases with known symptom onset, arrived on or before January 23
data <- subset(data, !is.na(Symptom))
data <- subset(data, Arrived <= 23+31)
data <- subset(data, !(is.na(Arrived) & Infected_first == 1 & Infected_last == Symptom)) # remove cases with no information
#' Compute the likelihood
#'
#' GT is a discretized distribution for the generation time
#'
infection.likelihood <- function(symptom, infected_first, infected_last, GT) {
loglike <- 0
for (i in 1:nrow(data)) {
min.incub <- symptom[i] - infected_last[i]
max.incub <- symptom[i] - infected_first[i]
loglike <- loglike + log(sum(GT$GT[1 +(min.incub):(max.incub)]))
}
loglike
}
myfun <- function(par) {
GT <- R0::generation.time("gamma", par,truncate = 100);
infection.likelihood(data$Symptom, data$Infected_first, data$Infected_last, GT)
}
fit <- optim(c(7.5, 3.4), myfun, control = list(fnscale = -1))
print(fit)
pars <- expand.grid(mean = seq(5, 15, 0.1), sd = seq(2, 10, 0.1))
pars$loglike <- apply(pars, 1, myfun)
print(pars[which.max(pars$loglike),]) ## print the grid-search MLE to terminal
pars$in.CR <- (pars$loglike > fit$value - qchisq(0.95, 1) / 2)
library(ggplot2)
p1 <- ggplot(pars) + aes(x = mean, y = sd, fill = loglike) + geom_tile()
p1
p2 <- ggplot(pars) + aes(x = mean, y = sd, fill = in.CR) +geom_tile()
p2
print(fit)
?R0::generation.time
myfun <- function(par) {
GT <- R0::generation.time("lognormal", par,truncate = 100);
infection.likelihood(data$Symptom, data$Infected_first, data$Infected_last, GT)
}
fit <- optim(c(7.5, 3.4), myfun, control = list(fnscale = -1))
print(fit)
pars <- expand.grid(mean = seq(5, 15, 0.1), sd = seq(2, 10, 0.1))
pars$loglike <- apply(pars, 1, myfun)
print(pars[which.max(pars$loglike),]) ## print the grid-search MLE to terminal
pars$in.CR <- (pars$loglike > fit$value - qchisq(0.95, 1) / 2)
library(ggplot2)
p1 <- ggplot(pars) + aes(x = mean, y = sd, fill = loglike) + geom_tile()
p1
p2 <- ggplot(pars) + aes(x = mean, y = sd, fill = in.CR) +geom_tile()
p2
#' Compute the likelihood
#'
#' GT is a discretized distribution for the generation time
#'
infection.likelihood <- function(symptom, infected_first, infected_last, GT) {
loglike <- 0
for (i in 1:nrow(data)) {
min.incub <- symptom[i] - infected_last[i]
max.incub <- symptom[i] - infected_first[i]
loglike <- loglike + log(sum(GT$GT[1 +(min.incub):(max.incub)]))
}
loglike
}
myfun <- function(par) {
GT <- R0::generation.time("lognormal", par,truncate = 100);
infection.likelihood(data$Symptom, data$Infected_first, data$Infected_last, GT)
}
fit <- optim(c(7.5, 3.4), myfun, control = list(fnscale = -1))
print(fit)
pars <- expand.grid(mean = seq(5, 15, 0.1), sd = seq(2, 10, 0.1))
pars$loglike <- apply(pars, 1, myfun)
print(pars[which.max(pars$loglike),]) ## print the grid-search MLE to terminal
pars$in.CR <- (pars$loglike > fit$value - qchisq(0.95, 1) / 2)
?R0::generation.time
myfun <- function(par) {
GT <- R0::generation.time("lognormal", par,truncate = 50);
infection.likelihood(data$Symptom, data$Infected_first, data$Infected_last, GT)
}
fit <- optim(c(7.5, 3.4), myfun, control = list(fnscale = -1))
print(fit)
myfun <- function(par) {
GT <- R0::generation.time("lognormal", par,truncate = 50);
infection.likelihood(data$Symptom, data$Infected_first, data$Infected_last, GT)
}
fit <- optim(c(7.5, 3.4), myfun, control = list(fnscale = -1))
myfun <- function(par) {
GT <- R0::generation.time("lognormal", par,truncate = 100);
infection.likelihood(data$Symptom, data$Infected_first, data$Infected_last, GT)
}
fit <- optim(c(7.5, 3.4), myfun, control = list(fnscale = -1))
print(fit)
pars <- expand.grid(mean = seq(5, 15, 0.1), sd = seq(2, 10, 0.1))
pars$loglike <- apply(pars, 1, myfun)
print(pars[which.max(pars$loglike),]) ## print the grid-search MLE to terminal
pars$in.CR <- (pars$loglike > fit$value - qchisq(0.95, 1) / 2)
library(ggplot2)
p1 <- ggplot(pars) + aes(x = mean, y = sd, fill = loglike) + geom_tile()
p1
p2 <- ggplot(pars) + aes(x = mean, y = sd, fill = in.CR) +geom_tile()
p2
hist(data$Symptom - data$Infected_last)
hist(data$Symptom - data$Infected_first)
source("functions.R")
data <- read.table("Feb10InChina.tsv", sep = "\t", header = TRUE)
data$Confirmed <- date.process(data$Confirmed)
data$Arrived <- date.process(data$Arrived)
data$Symptom <- date.process(data$Symptom)
data$Initial <- date.process(data$Initial)
data$Hospital <- date.process(data$Hospital)
case72 <- data[72,]
data <- data[-72, ] # Don't know how to parse this infected date yet
data <- parse.infected(data)
case72$Infected_first <- date.process("15-Jan")
case72$Infected_last <- date.process("21-Jan")
data <- rbind(data, case72)
## Only consider cases with known symptom onset
data <- subset(data, !is.na(Symptom))
## only consider cases arrived on or before January 23
# data <- subset(data, Arrived <= 23+31) ## this will remove outside cases
## remove cases with no infection informations
# data <- subset(data, !(is.na(Arrived) & Infected_first == 1 & Infected_last == Symptom)) # remove cases with no information
data <- subset(data, Infected_first != 1)
#' Compute the likelihood
#'
#' GT is a discretized distribution for the generation time
#'
infection.likelihood <- function(symptom, infected_first, infected_last, GT) {
loglike <- 0
for (i in 1:nrow(data)) {
min.incub <- symptom[i] - infected_last[i]
max.incub <- symptom[i] - infected_first[i]
loglike <- loglike + log(sum(GT$GT[1 +(min.incub):(max.incub)]))
}
loglike
}
myfun <- function(par) {
GT <- R0::generation.time("lognormal", par,truncate = 100);
infection.likelihood(data$Symptom, data$Infected_first, data$Infected_last, GT)
}
fit <- optim(c(7.5, 3.4), myfun, control = list(fnscale = -1))
print(fit)
pars <- expand.grid(mean = seq(5, 15, 0.1), sd = seq(2, 10, 0.1))
pars$loglike <- apply(pars, 1, myfun)
print(pars[which.max(pars$loglike),]) ## print the grid-search MLE to terminal
pars$in.CR <- (pars$loglike > fit$value - qchisq(0.95, 1) / 2)
library(ggplot2)
p1 <- ggplot(pars) + aes(x = mean, y = sd, fill = loglike) + geom_tile()
p1
p2 <- ggplot(pars) + aes(x = mean, y = sd, fill = in.CR) +geom_tile()
p2
hist(data$Symptom - data$Infected_last)
hist(data$Symptom - data$Infected_first)
## Only consider cases with known symptom onset
data <- subset(data, !is.na(Symptom))
source("functions.R")
data <- read.table("Feb10InChina.tsv", sep = "\t", header = TRUE)
data$Confirmed <- date.process(data$Confirmed)
data$Arrived <- date.process(data$Arrived)
data$Symptom <- date.process(data$Symptom)
data$Initial <- date.process(data$Initial)
data$Hospital <- date.process(data$Hospital)
case72 <- data[72,]
data <- data[-72, ] # Don't know how to parse this infected date yet
data <- parse.infected(data)
case72$Infected_first <- date.process("15-Jan")
case72$Infected_last <- date.process("21-Jan")
data <- rbind(data, case72)
head(data)
## Only consider cases with known symptom onset
data <- subset(data, !is.na(Symptom))
head(data)
source("functions.R")
data <- read.table("Feb10InChina.tsv", sep = "\t", header = TRUE)
data$Confirmed <- date.process(data$Confirmed)
data$Arrived <- date.process(data$Arrived)
data$Symptom <- date.process(data$Symptom)
data$Initial <- date.process(data$Initial)
data$Hospital <- date.process(data$Hospital)
case72 <- data[72,]
data <- data[-72, ] # Don't know how to parse this infected date yet
data <- parse.infected(data)
case72$Infected_first <- date.process("15-Jan")
case72$Infected_last <- date.process("21-Jan")
data <- rbind(data, case72)
summary(data$Symptom)
data[is.na(data$Symptom),]
## Only consider cases with known symptom onset
data <- subset(data, !is.na(Symptom))
## only consider cases arrived on or before January 23
# data <- subset(data, Arrived <= 23+31) ## this will remove outside cases
## remove cases with no infection informations
# data <- subset(data, !(is.na(Arrived) & Infected_first == 1 & Infected_last == Symptom)) # remove cases with no information
data <- subset(data, Infected_first != 1)
dim(data)
hist(data$Symptom - data$Infected_last)
hist(data$Symptom - data$Infected_first)
data[which(data$Symptom == data$Infected_first)]
summary(data$Symptom - data$Infected_first)
summary(data$Symptom - data$Infected_last)
data <- subset(data, Infected_last != Sympton)
## only consider cases arrived on or before January 23
# data <- subset(data, Arrived <= 23+31) ## this will remove outside cases
## remove cases with no infection informations
# data <- subset(data, !(is.na(Arrived) & Infected_first == 1 & Infected_last == Symptom)) # remove cases with no information
data <- subset(data, Infected_first != 1)
data <- subset(data, Infected_last != Symptom)
source("functions.R")
data <- read.table("Feb10InChina.tsv", sep = "\t", header = TRUE)
data$Confirmed <- date.process(data$Confirmed)
data$Arrived <- date.process(data$Arrived)
data$Symptom <- date.process(data$Symptom)
data$Initial <- date.process(data$Initial)
data$Hospital <- date.process(data$Hospital)
case72 <- data[72,]
data <- data[-72, ] # Don't know how to parse this infected date yet
data <- parse.infected(data)
case72$Infected_first <- date.process("15-Jan")
case72$Infected_last <- date.process("21-Jan")
data <- rbind(data, case72)
## Only consider cases with known symptom onset
data <- subset(data, !is.na(Symptom))
## only consider cases arrived on or before January 23
# data <- subset(data, Arrived <= 23+31) ## this will remove outside cases
## remove cases with no infection informations
# data <- subset(data, !(is.na(Arrived) & Infected_first == 1 & Infected_last == Symptom)) # remove cases with no information
# data <- subset(data, !(is.na(Arrived))) ## only consider outside cases
data <- subset(data, Infected_first != 1)
data <- subset(data, Infected_last != Symptom)
hist(data$Symptom - data$Infected_last)
hist(data$Symptom - data$Infected_first)
dim(data)
hist(data$Symptom - data$Infected_last)
hist(data$Symptom - data$Infected_first)
#' Compute the likelihood
#'
#' GT is a discretized distribution for the generation time
#'
infection.likelihood <- function(symptom, infected_first, infected_last, GT) {
loglike <- 0
for (i in 1:nrow(data)) {
min.incub <- symptom[i] - infected_last[i]
max.incub <- symptom[i] - infected_first[i]
loglike <- loglike + log(sum(GT$GT[1 +(min.incub):(max.incub)]))
}
loglike
}
myfun <- function(par) {
GT <- R0::generation.time("lognormal", par,truncate = 100);
infection.likelihood(data$Symptom, data$Infected_first, data$Infected_last, GT)
}
fit <- optim(c(7.5, 3.4), myfun, control = list(fnscale = -1))
print(fit)
pars <- expand.grid(mean = seq(5, 15, 0.1), sd = seq(2, 10, 0.1))
pars$loglike <- apply(pars, 1, myfun)
print(pars[which.max(pars$loglike),]) ## print the grid-search MLE to terminal
pars$in.CR <- (pars$loglike > fit$value - qchisq(0.95, 1) / 2)
library(ggplot2)
p1 <- ggplot(pars) + aes(x = mean, y = sd, fill = loglike) + geom_tile()
p1
p2 <- ggplot(pars) + aes(x = mean, y = sd, fill = in.CR) +geom_tile()
p2
pars <- expand.grid(mean = seq(3, 15, 0.1), sd = seq(2, 8, 0.1))
pars$loglike <- apply(pars, 1, myfun)
print(pars[which.max(pars$loglike),]) ## print the grid-search MLE to terminal
pars$in.CR <- (pars$loglike > fit$value - qchisq(0.95, 1) / 2)
print(fit)
pars <- expand.grid(mean = seq(3, 15, 0.05), sd = seq(2, 8, 0.05))
pars$loglike <- apply(pars, 1, myfun)
print(pars[which.max(pars$loglike),]) ## print the grid-search MLE to terminal
pars$in.CR <- (pars$loglike > fit$value - qchisq(0.95, 1) / 2)
print(fit)
p1 <- ggplot(pars) + aes(x = mean, y = sd, fill = loglike) + geom_tile()
p1
p2 <- ggplot(pars) + aes(x = mean, y = sd, fill = in.CR) +geom_tile()
p2
hist(data$Infected_last - data$Infected_first)
data[which(data$Infected_last < data$Infected_first)]
data[which(data$Infected_last < data$Infected_first),]
source("functions.R")
data <- read.table("Feb10InChina.tsv", sep = "\t", header = TRUE)
data$Confirmed <- date.process(data$Confirmed)
data$Arrived <- date.process(data$Arrived)
data$Symptom <- date.process(data$Symptom)
data$Initial <- date.process(data$Initial)
data$Hospital <- date.process(data$Hospital)
case72 <- data[72,]
data <- data[-c(72,19,95), ] # Don't know how to parse these infected date yet
data <- parse.infected(data)
case72$Infected_first <- date.process("15-Jan")
case72$Infected_last <- date.process("21-Jan")
data <- rbind(data, case72)
## Only consider cases with known symptom onset
data <- subset(data, !is.na(Symptom))
## only consider cases arrived on or before January 23
# data <- subset(data, Arrived <= 23+31) ## this will remove outside cases
## remove cases with no infection informations
# data <- subset(data, !(is.na(Arrived) & Infected_first == 1 & Infected_last == Symptom)) # remove cases with no information
# data <- subset(data, !(is.na(Arrived))) ## only consider outside cases
data <- subset(data, Infected_first != 1)
data <- subset(data, Infected_last != Symptom)
dim(data)
hist(data$Symptom - data$Infected_last)
hist(data$Symptom - data$Infected_first)
hist(data$Infected_last - data$Infected_first)
source("functions.R")
data <- read.table("Feb10InChina.tsv", sep = "\t", header = TRUE)
data$Confirmed <- date.process(data$Confirmed)
data$Arrived <- date.process(data$Arrived)
data$Symptom <- date.process(data$Symptom)
data$Initial <- date.process(data$Initial)
data$Hospital <- date.process(data$Hospital)
case72 <- data[72,]
data <- data[-c(72,19,95), ] # Don't know how to parse these infected date yet
data <- parse.infected(data)
case72$Infected_first <- date.process("15-Jan")
case72$Infected_last <- date.process("21-Jan")
data <- rbind(data, case72)
## Only consider cases with known symptom onset
data <- subset(data, !is.na(Symptom))
## only consider cases arrived on or before January 23
# data <- subset(data, Arrived <= 23+31) ## this will remove outside cases
## remove cases with no infection informations
# data <- subset(data, !(is.na(Arrived) & Infected_first == 1 & Infected_last == Symptom)) # remove cases with no information
# data <- subset(data, !(is.na(Arrived))) ## only consider outside cases
data <- subset(data, Infected_first != 1)
data <- subset(data, Infected_last != Symptom)
dim(data)
hist(data$Symptom - data$Infected_last)
hist(data$Symptom - data$Infected_first)
hist(data$Infected_last - data$Infected_first)
#' Compute the likelihood
#'
#' GT is a discretized distribution for the generation time
#'
infection.likelihood <- function(symptom, infected_first, infected_last, GT) {
loglike <- 0
for (i in 1:nrow(data)) {
min.incub <- symptom[i] - infected_last[i]
max.incub <- symptom[i] - infected_first[i]
loglike <- loglike + log(sum(GT$GT[1 +(min.incub):(max.incub)]))
}
loglike
}
myfun <- function(par) {
GT <- R0::generation.time("lognormal", par,truncate = 100);
infection.likelihood(data$Symptom, data$Infected_first, data$Infected_last, GT)
}
fit <- optim(c(7.5, 3.4), myfun, control = list(fnscale = -1))
print(fit)
pars <- expand.grid(mean = seq(3, 15, 0.05), sd = seq(2, 8, 0.05))
pars$loglike <- apply(pars, 1, myfun)
print(pars[which.max(pars$loglike),]) ## print the grid-search MLE to terminal
pars$in.CR <- (pars$loglike > fit$value - qchisq(0.95, 1) / 2)
